#!/usr/bin/env python3
"""
Generate overrides from a CSV mapping of MW guest addresses to app hook names.

CSV format (header optional): name,guest_addr
Alternatively: name,unleashed_addr,guest_addr (extra column ignored)

Writes Mw05Recomp/ppc_hook_overrides.gen.cpp with InsertFunction calls.
"""

import argparse
from pathlib import Path


def parse_csv(p: Path):
    rows = []
    for line in p.read_text(encoding='utf-8', errors='ignore').splitlines():
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        parts = [c.strip() for c in line.split(',')]
        if parts[0].lower() == 'name':
            continue
        if len(parts) < 2:
            continue
        name = parts[0]
        guest = parts[-1]
        try:
            addr = int(guest, 16)
        except ValueError:
            # allow 0x prefix or bare hex
            guest2 = guest
            if guest2.lower().startswith('0x'):
                guest2 = guest2[2:]
            try:
                addr = int(guest2, 16)
            except Exception:
                continue
        rows.append((name, addr))
    return rows


def emit_cpp(rows):
    lines = []
    lines.append('// Auto-generated by tools/gen_hook_overrides_from_csv.py; DO NOT EDIT')
    lines.append('#include <kernel/memory.h>')
    lines.append('#include <cpu/ppc_context.h>')
    lines.append('')
    lines.append('#if defined(__clang__) || defined(__GNUC__)')
    lines.append('#define PPC_WEAK_DECL __attribute__((weak))')
    lines.append('#else')
    lines.append('#define PPC_WEAK_DECL')
    lines.append('#endif')
    for name, _ in rows:
        lines.append(f'void {name}(PPCContext& __restrict, uint8_t*) PPC_WEAK_DECL;')
    lines.append('')
    lines.append('static void RegisterHookOverrides() {')
    for name, addr in rows:
        lines.append(f'    if (&{name}) g_memory.InsertFunction(0x{addr:08X}, {name});')
    lines.append('}')
    lines.append('')
    lines.append('#if defined(_MSC_VER)')
    lines.append('#  pragma section(".CRT$XCU",read)')
    lines.append('    static void __cdecl ppc_hook_overrides_ctor();')
    lines.append('    __declspec(allocate(".CRT$XCU")) void (*ppc_hook_overrides_ctor_)(void) = ppc_hook_overrides_ctor;')
    lines.append('    static void __cdecl ppc_hook_overrides_ctor() { RegisterHookOverrides(); }')
    lines.append('#else')
    lines.append('    __attribute__((constructor)) static void ppc_hook_overrides_ctor() { RegisterHookOverrides(); }')
    lines.append('#endif')
    lines.append('')
    return '\n'.join(lines) + '\n'


def main() -> int:
    ap = argparse.ArgumentParser(description='Generate hook overrides from CSV')
    ap.add_argument('--csv', type=Path, required=True)
    ap.add_argument('--out-cpp', type=Path, default=Path('Mw05Recomp/ppc_hook_overrides.gen.cpp'))
    args = ap.parse_args()

    rows = parse_csv(args.csv)
    if not rows:
        print('No rows parsed; nothing to emit')
        return 0
    args.out_cpp.parent.mkdir(parents=True, exist_ok=True)
    args.out_cpp.write_text(emit_cpp(rows), encoding='utf-8')
    print(f'Wrote {args.out_cpp} with {len(rows)} entries')
    return 0


if __name__ == '__main__':
    raise SystemExit(main())

