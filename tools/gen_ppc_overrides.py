#!/usr/bin/env python3
"""
Generate app-side PPC override mappings.

Scans Mw05Recomp sources for PPC_FUNC(sub_XXXXXXXX) definitions and emits
Mw05Recomp/ppc_overrides.gen.cpp that registers those functions into the
guest->host lookup table, overriding the default recompiled mappings.

Usage (invoked via CMake custom command):
  python tools/gen_ppc_overrides.py \
     --src-root Mw05Recomp \
     --out-cpp  ${CMAKE_CURRENT_BINARY_DIR}/ppc_overrides.gen.cpp

You can also run it manually from repository root.
"""

import argparse
import re
import sys
from pathlib import Path


def _cmake_source_list(cmake_path: Path, base: Path) -> list[Path]:
    files = []
    try:
        txt = cmake_path.read_text(encoding="utf-8", errors="ignore")
    except Exception:
        return files
    # naive: match any quoted .cpp under Mw05Recomp directory
    for m in re.finditer(r'"([^"]+\.cpp)"', txt):
        rel = m.group(1)
        p = (base / rel).resolve()
        if p.exists() and p.suffix == ".cpp":
            files.append(p)
    return files


def scan_ppc_funcs(src_root: Path):
    rx_func = re.compile(r"^\s*PPC_FUNC\s*\(\s*(sub_([0-9A-Fa-f]{8}))\s*\)")
    rx_impl = re.compile(r"^\s*PPC_FUNC_IMPL\s*\(\s*__imp__\s*(sub_([0-9A-Fa-f]{8}))\s*\)")
    funcs = {}
    # Restrict to files listed in Mw05Recomp/CMakeLists.txt
    cmake_list = src_root / "CMakeLists.txt"
    files = _cmake_source_list(cmake_list, src_root)
    if not files:
        files = list(src_root.rglob("*.cpp"))
    for p in files:
        try:
            txt = p.read_text(encoding="utf-8", errors="ignore")
        except Exception:
            continue
        for line in txt.splitlines():
            m = rx_func.search(line) or rx_impl.search(line)
            if not m:
                continue
            name = m.group(1)
            addr_hex = m.group(2).upper()
            addr = int(addr_hex, 16)
            funcs[addr] = name
    return dict(sorted(funcs.items()))


def emit_cpp(funcs: dict) -> str:
    lines = []
    lines.append("// Auto-generated by tools/gen_ppc_overrides.py; DO NOT EDIT")
    lines.append("#include <kernel/memory.h>")
    lines.append("#include <cpu/ppc_context.h>")
    lines.append("")
    # Forward declarations as weak symbols so build doesn't fail
    # when a PPC_FUNC is compiled out by CMake options.
    lines.append("#if defined(__clang__) || defined(__GNUC__)\n#define PPC_WEAK_DECL __attribute__((weak))\n#else\n#define PPC_WEAK_DECL\n#endif")
    for addr, name in funcs.items():
        lines.append(f"void {name}(PPCContext& __restrict, uint8_t*) PPC_WEAK_DECL;")
    lines.append("")
    lines.append("static void RegisterPPCOverrides() {")
    for addr, name in funcs.items():
        lines.append(f"    if (&{name}) g_memory.InsertFunction(0x{addr:08X}, {name});")
    lines.append("}")
    lines.append("")
    # Run after globals are constructed so g_memory is ready
    lines.append("#if defined(_MSC_VER)")
    lines.append("#  pragma section(\".CRT$XCU\",read)")
    lines.append("    static void __cdecl ppc_overrides_ctor();")
    lines.append("    __declspec(allocate(\".CRT$XCU\")) void (*ppc_overrides_ctor_)(void) = ppc_overrides_ctor;")
    lines.append("    static void __cdecl ppc_overrides_ctor() { RegisterPPCOverrides(); }")
    lines.append("#else")
    lines.append("    __attribute__((constructor)) static void ppc_overrides_ctor() { RegisterPPCOverrides(); }")
    lines.append("#endif")
    lines.append("")
    return "\n".join(lines) + "\n"


def main() -> int:
    ap = argparse.ArgumentParser(description="Generate PPC override mappings from app sources")
    ap.add_argument("--src-root", type=Path, default=Path("Mw05Recomp"))
    ap.add_argument("--out-cpp", type=Path, default=Path("ppc_overrides.gen.cpp"))
    args = ap.parse_args()

    funcs = scan_ppc_funcs(args.src_root)
    if not funcs:
        print(f"No PPC_FUNC(sub_XXXXXXXX) found under {args.src_root}", file=sys.stderr)
        # Still write an empty TU to keep build stable
    cpp = emit_cpp(funcs)
    args.out_cpp.parent.mkdir(parents=True, exist_ok=True)
    args.out_cpp.write_text(cpp, encoding="utf-8")
    print(f"Wrote {args.out_cpp} with {len(funcs)} overrides")
    return 0


if __name__ == "__main__":
    sys.exit(main())
